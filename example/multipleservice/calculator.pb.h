// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_calculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_calculator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_calculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_calculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_calculator_2eproto;
namespace multipleservice {
class CalculateRequest;
class CalculateRequestDefaultTypeInternal;
extern CalculateRequestDefaultTypeInternal _CalculateRequest_default_instance_;
class CalculateResponse;
class CalculateResponseDefaultTypeInternal;
extern CalculateResponseDefaultTypeInternal _CalculateResponse_default_instance_;
class CalculateResultCode;
class CalculateResultCodeDefaultTypeInternal;
extern CalculateResultCodeDefaultTypeInternal _CalculateResultCode_default_instance_;
}  // namespace multipleservice
PROTOBUF_NAMESPACE_OPEN
template<> ::multipleservice::CalculateRequest* Arena::CreateMaybeMessage<::multipleservice::CalculateRequest>(Arena*);
template<> ::multipleservice::CalculateResponse* Arena::CreateMaybeMessage<::multipleservice::CalculateResponse>(Arena*);
template<> ::multipleservice::CalculateResultCode* Arena::CreateMaybeMessage<::multipleservice::CalculateResultCode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace multipleservice {

// ===================================================================

class CalculateResultCode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multipleservice.CalculateResultCode) */ {
 public:
  CalculateResultCode();
  virtual ~CalculateResultCode();

  CalculateResultCode(const CalculateResultCode& from);
  CalculateResultCode(CalculateResultCode&& from) noexcept
    : CalculateResultCode() {
    *this = ::std::move(from);
  }

  inline CalculateResultCode& operator=(const CalculateResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateResultCode& operator=(CalculateResultCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalculateResultCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculateResultCode* internal_default_instance() {
    return reinterpret_cast<const CalculateResultCode*>(
               &_CalculateResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CalculateResultCode& a, CalculateResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateResultCode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalculateResultCode* New() const final {
    return CreateMaybeMessage<CalculateResultCode>(nullptr);
  }

  CalculateResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalculateResultCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalculateResultCode& from);
  void MergeFrom(const CalculateResultCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateResultCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multipleservice.CalculateResultCode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calculator_2eproto);
    return ::descriptor_table_calculator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const void* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:multipleservice.CalculateResultCode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calculator_2eproto;
};
// -------------------------------------------------------------------

class CalculateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multipleservice.CalculateRequest) */ {
 public:
  CalculateRequest();
  virtual ~CalculateRequest();

  CalculateRequest(const CalculateRequest& from);
  CalculateRequest(CalculateRequest&& from) noexcept
    : CalculateRequest() {
    *this = ::std::move(from);
  }

  inline CalculateRequest& operator=(const CalculateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateRequest& operator=(CalculateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalculateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculateRequest* internal_default_instance() {
    return reinterpret_cast<const CalculateRequest*>(
               &_CalculateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CalculateRequest& a, CalculateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalculateRequest* New() const final {
    return CreateMaybeMessage<CalculateRequest>(nullptr);
  }

  CalculateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalculateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalculateRequest& from);
  void MergeFrom(const CalculateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multipleservice.CalculateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calculator_2eproto);
    return ::descriptor_table_calculator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
  };
  // int32 a = 1;
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 b = 2;
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::int32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:multipleservice.CalculateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  ::PROTOBUF_NAMESPACE_ID::int32 b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calculator_2eproto;
};
// -------------------------------------------------------------------

class CalculateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multipleservice.CalculateResponse) */ {
 public:
  CalculateResponse();
  virtual ~CalculateResponse();

  CalculateResponse(const CalculateResponse& from);
  CalculateResponse(CalculateResponse&& from) noexcept
    : CalculateResponse() {
    *this = ::std::move(from);
  }

  inline CalculateResponse& operator=(const CalculateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateResponse& operator=(CalculateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalculateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculateResponse* internal_default_instance() {
    return reinterpret_cast<const CalculateResponse*>(
               &_CalculateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CalculateResponse& a, CalculateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalculateResponse* New() const final {
    return CreateMaybeMessage<CalculateResponse>(nullptr);
  }

  CalculateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalculateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalculateResponse& from);
  void MergeFrom(const CalculateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multipleservice.CalculateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calculator_2eproto);
    return ::descriptor_table_calculator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kCFieldNumber = 2,
  };
  // .multipleservice.CalculateResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::multipleservice::CalculateResultCode& result() const;
  ::multipleservice::CalculateResultCode* release_result();
  ::multipleservice::CalculateResultCode* mutable_result();
  void set_allocated_result(::multipleservice::CalculateResultCode* result);
  private:
  const ::multipleservice::CalculateResultCode& _internal_result() const;
  ::multipleservice::CalculateResultCode* _internal_mutable_result();
  public:

  // int32 c = 2;
  void clear_c();
  ::PROTOBUF_NAMESPACE_ID::int32 c() const;
  void set_c(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_c() const;
  void _internal_set_c(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:multipleservice.CalculateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::multipleservice::CalculateResultCode* result_;
  ::PROTOBUF_NAMESPACE_ID::int32 c_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calculator_2eproto;
};
// ===================================================================

class CalculatorServiceRpc_Stub;

class CalculatorServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline CalculatorServiceRpc() {};
 public:
  virtual ~CalculatorServiceRpc();

  typedef CalculatorServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::multipleservice::CalculateRequest* request,
                       ::multipleservice::CalculateResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Sub(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::multipleservice::CalculateRequest* request,
                       ::multipleservice::CalculateResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Mul(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::multipleservice::CalculateRequest* request,
                       ::multipleservice::CalculateResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Div(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::multipleservice::CalculateRequest* request,
                       ::multipleservice::CalculateResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CalculatorServiceRpc);
};

class CalculatorServiceRpc_Stub : public CalculatorServiceRpc {
 public:
  CalculatorServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  CalculatorServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~CalculatorServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements CalculatorServiceRpc ------------------------------------------

  void Add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::multipleservice::CalculateRequest* request,
                       ::multipleservice::CalculateResponse* response,
                       ::google::protobuf::Closure* done);
  void Sub(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::multipleservice::CalculateRequest* request,
                       ::multipleservice::CalculateResponse* response,
                       ::google::protobuf::Closure* done);
  void Mul(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::multipleservice::CalculateRequest* request,
                       ::multipleservice::CalculateResponse* response,
                       ::google::protobuf::Closure* done);
  void Div(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::multipleservice::CalculateRequest* request,
                       ::multipleservice::CalculateResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CalculatorServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CalculateResultCode

// int32 errcode = 1;
inline void CalculateResultCode::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculateResultCode::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculateResultCode::errcode() const {
  // @@protoc_insertion_point(field_get:multipleservice.CalculateResultCode.errcode)
  return _internal_errcode();
}
inline void CalculateResultCode::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void CalculateResultCode::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:multipleservice.CalculateResultCode.errcode)
}

// bytes errmsg = 2;
inline void CalculateResultCode::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CalculateResultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:multipleservice.CalculateResultCode.errmsg)
  return _internal_errmsg();
}
inline void CalculateResultCode::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:multipleservice.CalculateResultCode.errmsg)
}
inline std::string* CalculateResultCode::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:multipleservice.CalculateResultCode.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& CalculateResultCode::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void CalculateResultCode::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CalculateResultCode::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:multipleservice.CalculateResultCode.errmsg)
}
inline void CalculateResultCode::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:multipleservice.CalculateResultCode.errmsg)
}
inline void CalculateResultCode::set_errmsg(const void* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:multipleservice.CalculateResultCode.errmsg)
}
inline std::string* CalculateResultCode::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CalculateResultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:multipleservice.CalculateResultCode.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CalculateResultCode::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:multipleservice.CalculateResultCode.errmsg)
}

// -------------------------------------------------------------------

// CalculateRequest

// int32 a = 1;
inline void CalculateRequest::clear_a() {
  a_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculateRequest::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculateRequest::a() const {
  // @@protoc_insertion_point(field_get:multipleservice.CalculateRequest.a)
  return _internal_a();
}
inline void CalculateRequest::_internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  a_ = value;
}
inline void CalculateRequest::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:multipleservice.CalculateRequest.a)
}

// int32 b = 2;
inline void CalculateRequest::clear_b() {
  b_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculateRequest::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculateRequest::b() const {
  // @@protoc_insertion_point(field_get:multipleservice.CalculateRequest.b)
  return _internal_b();
}
inline void CalculateRequest::_internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  b_ = value;
}
inline void CalculateRequest::set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:multipleservice.CalculateRequest.b)
}

// -------------------------------------------------------------------

// CalculateResponse

// .multipleservice.CalculateResultCode result = 1;
inline bool CalculateResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CalculateResponse::has_result() const {
  return _internal_has_result();
}
inline void CalculateResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::multipleservice::CalculateResultCode& CalculateResponse::_internal_result() const {
  const ::multipleservice::CalculateResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::multipleservice::CalculateResultCode*>(
      &::multipleservice::_CalculateResultCode_default_instance_);
}
inline const ::multipleservice::CalculateResultCode& CalculateResponse::result() const {
  // @@protoc_insertion_point(field_get:multipleservice.CalculateResponse.result)
  return _internal_result();
}
inline ::multipleservice::CalculateResultCode* CalculateResponse::release_result() {
  // @@protoc_insertion_point(field_release:multipleservice.CalculateResponse.result)
  
  ::multipleservice::CalculateResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::multipleservice::CalculateResultCode* CalculateResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::multipleservice::CalculateResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::multipleservice::CalculateResultCode* CalculateResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:multipleservice.CalculateResponse.result)
  return _internal_mutable_result();
}
inline void CalculateResponse::set_allocated_result(::multipleservice::CalculateResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:multipleservice.CalculateResponse.result)
}

// int32 c = 2;
inline void CalculateResponse::clear_c() {
  c_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculateResponse::_internal_c() const {
  return c_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculateResponse::c() const {
  // @@protoc_insertion_point(field_get:multipleservice.CalculateResponse.c)
  return _internal_c();
}
inline void CalculateResponse::_internal_set_c(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  c_ = value;
}
inline void CalculateResponse::set_c(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:multipleservice.CalculateResponse.c)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace multipleservice

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_calculator_2eproto
